# Routing rules for the external-facing Developer API platform.
# Handles API key authentication and applies stricter rate limits suitable for third-party developers.
# Based on SDS Section 3.1.5.

location /public-api/v1/ {
    # Step 1: Validate developer's API Key using the Lua script.
    # This script performs a subrequest to the backend or checks a cache.
    access_by_lua_file /etc/nginx/lua/auth_apikey.lua;

    # Step 2: Apply rate limiting specific to developer API keys.
    limit_req zone=developer_api_limit burst=10 nodelay;

    # Step 3: Proxy the validated request to the backend developer API service.
    proxy_pass http://api_developer_service;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Public APIs often have a more open CORS policy.
    add_header 'Access-Control-Allow-Origin' '*' always;
}

# This location is only accessible from within Nginx (e.g., via ngx.location.capture).
# It's used by the auth_apikey.lua script to validate keys against the backend service
# without exposing the validation endpoint to the public.
location = /internal_validate_apikey {
    internal; # Restricts external access, can only be called from other locations or scripts.

    # The Lua script will pass the API key in the request body.
    proxy_pass_request_body on;
    proxy_set_header Content-Type 'application/json';
    proxy_set_header X-Original-Request-ID $request_id;

    # Forward the request to the actual validation endpoint on the backend service.
    # The backend service should have an endpoint like '/internal/v1/keys/validate'.
    proxy_pass http://api_developer_service/internal/v1/keys/validate;
}