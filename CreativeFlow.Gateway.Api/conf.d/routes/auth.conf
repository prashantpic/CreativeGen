# Configuration file containing all routing rules (location blocks) for the
# Authentication and User Management services, as per SDS Section 3.1.5.

# Generic handler for CORS preflight (OPTIONS) requests.
# This avoids duplicating CORS headers in every location block.
if ($request_method = 'OPTIONS') {
    add_header 'Access-Control-Allow-Origin' $cors_header;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-API-Key';
    add_header 'Access-Control-Max-Age' 1728000;
    add_header 'Content-Type' 'text/plain; charset=utf-8';
    add_header 'Content-Length' 0;
    return 204;
}

# Common proxy settings to be used in the locations below.
# This prevents repetition and simplifies maintenance.
location / {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    add_header 'Access-Control-Allow-Origin' $cors_header always;
}

# Unprotected endpoint for user registration.
location /api/v1/auth/register {
    proxy_pass http://auth_service;
}

# Unprotected endpoint for user login with stricter rate limiting to prevent brute-force attacks.
# The '=' modifier ensures an exact match for this location.
location = /api/v1/auth/login {
    limit_req zone=login_limit burst=5 nodelay;
    proxy_pass http://auth_service;
}

# Protected endpoints for user profiles. Requires JWT authentication.
location /api/v1/profiles/ {
    # Step 1: Validate user's JWT using the Lua script.
    access_by_lua_file /etc/nginx/lua/auth_jwt.lua;

    # Step 2: Apply rate limiting for authenticated users.
    limit_req zone=user_api_limit burst=40 nodelay;

    # Step 3: Proxy to the backend authentication service.
    proxy_pass http://auth_service;
}