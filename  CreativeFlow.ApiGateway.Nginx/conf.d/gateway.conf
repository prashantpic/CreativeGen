# ----------------------------------------------------------------------
# Main Gateway Server Configuration
#
# This file defines the primary virtual server for the CreativeFlow API Gateway.
# It handles all incoming traffic, terminates SSL, applies global policies,
# and routes requests to the appropriate upstream services.
# ----------------------------------------------------------------------

# Include upstream definitions for all backend services.
# This allows for load balancing and easy service discovery.
# Example files in /etc/nginx/upstreams/ could be odoo.conf, aigeneration.conf, etc.
include /etc/nginx/upstreams/*.conf;

# Include map definitions, security policies, and other global snippets.
include /etc/nginx/conf.d/maps.conf;
include /etc/nginx/snippets/security_headers.conf;
include /etc/nginx/snippets/ssl_params.conf;
include /etc/nginx/snippets/rate_limiting.conf;
include /etc/nginx/snippets/cors.conf;


# ----------------------------------------------------------------------
# HTTP Server Block
#
# Listens on port 80 and performs a permanent redirect (301) to the
# secure HTTPS version of the site. This ensures all traffic is encrypted.
# ----------------------------------------------------------------------
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    # Replace with your actual domain name(s)
    server_name api.creativeflow.com *.api.creativeflow.com;

    # Log requests for redirection for debugging purposes
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Enforce HTTPS
    return 301 https://$host$request_uri;
}


# ----------------------------------------------------------------------
# HTTPS Server Block (Primary Gateway)
#
# This is the main server block that handles all API traffic.
# It terminates SSL, applies security policies, and routes requests.
# ----------------------------------------------------------------------
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    # Replace with your actual domain name(s)
    server_name api.creativeflow.com *.api.creativeflow.com;

    # --- SSL/TLS Configuration ---
    # Replace with the actual paths to your SSL certificate and private key.
    # It is recommended to use a service like Let's Encrypt or your cloud provider's ACM.
    ssl_certificate /etc/nginx/ssl/live/api.creativeflow.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/api.creativeflow.com/privkey.pem;

    # Include strong SSL parameters (defined in snippets/ssl_params.conf)
    # This will configure ciphers, protocols, and other security settings.
    include /etc/nginx/snippets/ssl_params.conf;

    # --- Logging ---
    # Defines the log format and paths for access and error logs.
    # Using a JSON format is recommended for easier parsing by log aggregators.
    access_log /var/log/nginx/access.log main_json;
    error_log /var/log/nginx/error.log warn;


    # --- Global Policies ---

    # Add security headers (defined in snippets/security_headers.conf)
    # This adds headers like HSTS, X-Frame-Options, X-Content-Type-Options, etc.
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    include /etc/nginx/snippets/security_headers.conf;

    # Apply global rate limiting (zone defined in snippets/rate_limiting.conf)
    # This helps protect against brute-force attacks and DoS.
    limit_req zone=global_rate_limit burst=100 nodelay;


    # --- Default Behavior ---

    # A default root for serving static error pages if needed.
    root /var/www/html;

    # Custom error pages for a better user experience.
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        internal;
    }


    # --- Routing ---

    # Health check endpoint for load balancers and monitoring systems.
    location /health {
        access_log off;
        return 200 '{"status":"ok"}';
        add_header Content-Type application/json;
    }

    # Include all location-specific routing configuration files.
    # This keeps the main gateway configuration clean and modular.
    # Each file in /etc/nginx/locations/ defines a `location` block
    # for a specific service or API path (e.g., /api/v1/auth, /api/v1/generation, etc.)
    # and uses `proxy_pass` to route to the appropriate upstream.
    include /etc/nginx/locations/*.conf;

}