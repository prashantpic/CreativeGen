#
# CreativeFlow API Gateway
# Main routing configuration for protected v1 API endpoints.
#
# Description:
# This configuration file defines the primary `location /api/v1/` block,
# which serves as the entry point for all protected API calls. It is
# responsible for enforcing authentication (JWT or API Key) before proxying
# the request to the appropriate backend microservice.
#

location /api/v1/ {
    # ==================================
    # === Authentication and Authorization ===
    # ==================================
    # All requests to /api/v1/ must pass an authentication check.
    # We use a Lua script for flexible authentication, which can handle
    # both Bearer tokens (JWT for users) and API Keys (for machine clients).
    #
    # The `auth.lua` script is expected to:
    # 1. Extract the token from the 'Authorization' header.
    # 2. Differentiate between a Bearer token and an API Key.
    # 3. Validate the token (check signature, expiration for JWTs; lookup key for API keys).
    # 4. If valid, extract user/client identity and set it in request headers
    #    (e.g., X-User-ID, X-User-Email, X-User-Subscription-Tier).
    # 5. If invalid, it should immediately exit with a 401 Unauthorized status.
    access_by_lua_file /etc/nginx/lua/auth.lua;

    # ========================
    # === Proxy Settings ===
    # ========================
    # These common proxy settings are inherited by all nested service locations.
    # The 'proxy_params.conf' include file contains standard headers like
    # Host, X-Real-IP, X-Forwarded-For, etc.
    include conf.d/includes/proxy_params.conf;

    # Pass authenticated identity and other critical info to upstream services.
    # The Lua script is responsible for populating the values of these variables.
    proxy_set_header X-User-ID $authenticated_user_id;
    proxy_set_header X-User-Email $authenticated_user_email;
    proxy_set_header X-Subscription-Tier $authenticated_user_subscription_tier;
    proxy_set_header X-Client-ID $authenticated_client_id;
    proxy_set_header X-Request-ID $request_id; # Pass correlation ID


    # =================================
    # === Service-Specific Routing ===
    # =================================
    # Route requests to the correct microservice based on the path prefix.
    # The order of these locations does not matter as Nginx uses the most
    # specific prefix match.

    # --- AI Generation Orchestration Service ---
    # Handles creating and managing AI generation jobs.
    location /api/v1/generation-requests/ {
        proxy_pass http://aigen_orchestration_service;
    }

    # --- n8n Callbacks ---
    # NOTE: These callbacks are protected by a different mechanism (e.g., shared secret)
    # than user JWTs. The `auth.lua` script must contain specific logic to validate
    # requests to this path using the appropriate method.
    location /api/v1/n8n-callbacks/ {
        proxy_pass http://aigen_orchestration_service;
    }

    # --- User Management Service (Protected Endpoints) ---
    # Handles protected user actions, e.g., fetching the current user's profile (`/api/v1/users/me`).
    location /api/v1/users/ {
        proxy_pass http://odoo_backend;
    }

    # --- Project & Asset Management Service (Conceptual) ---
    # A dedicated service for managing workbenches, projects, assets, templates, etc.
    location /api/v1/workbenches/ {
        proxy_pass http://project_management_service;
    }
    location /api/v1/projects/ {
        proxy_pass http://project_management_service;
    }
    location /api/v1/assets/ {
        proxy_pass http://project_management_service;
    }
    location /api/v1/templates/ {
        proxy_pass http://project_management_service;
    }

    # --- Brand Kit Service (Conceptual) ---
    # A dedicated service for managing brand kits.
    location /api/v1/brand-kits/ {
        proxy_pass http://brand_kit_service;
    }

    # --- Social Media & Publishing Service (Conceptual) ---
    # For managing social media connections and publishing content.
    location /api/v1/social/ {
        proxy_pass http://publishing_service;
    }

    # ====================
    # === Error Handling ===
    # ====================
    # Custom JSON error responses for auth failures.
    error_page 401 = @error401;
    location @error401 {
        default_type application/json;
        return 401 '{"status": "error", "code": "UNAUTHORIZED", "message": "Authentication required. Please provide a valid token."}';
    }

    error_page 403 = @error403;
    location @error403 {
        default_type application/json;
        return 403 '{"status": "error", "code": "FORBIDDEN", "message": "You do not have permission to access this resource."}';
    }

    # --- Default Fallback ---
    # If a request reaches here, it means no specific service location matched.
    # This prevents requests from accidentally hitting an unintended backend.
    # Returning a 404 is the safest default behavior.
    location / {
        default_type application/json;
        return 404 '{"status": "error", "code": "NOT_FOUND", "message": "API endpoint not found."}';
    }
}