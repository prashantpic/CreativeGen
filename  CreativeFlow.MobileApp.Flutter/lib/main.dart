import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_crashlytics/firebase_crashlytics.dart';
import 'package:creativeflow_mobileapp_flutter/app.dart';
// This file is generated by the FlutterFire CLI.
// import 'firebase_options.dart';

/// The main entry point for the CreativeFlow mobile application.
///
/// This function is responsible for initializing the Flutter framework and
/// essential services before running the application widget.
Future<void> main() async {
  // Ensure that the Flutter widget binding is initialized. This is required
  // before using any Flutter-specific APIs.
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase services for the application.
  // This must be done before using any Firebase-related functionality.
  // Note: The 'firebase_options.dart' file is generated by the FlutterFire CLI
  // and contains platform-specific Firebase configuration.
  // await Firebase.initializeApp(
  //   options: DefaultFirebaseOptions.currentPlatform,
  // );

  // Configure global error handling to report crashes to Firebase Crashlytics.
  // This helps in monitoring application stability and identifying issues.
  if (kReleaseMode) { // Only enable Crashlytics in release mode
    FlutterError.onError = (errorDetails) {
      FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);
    };
    // Pass all uncaught asynchronous errors that aren't handled by the
    // Flutter framework to Crashlytics.
    PlatformDispatcher.instance.onError = (error, stack) {
      FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);
      return true;
    };
  }

  // Placeholder for Dependency Injection (DI) setup.
  // Services like ApiClient, Repositories, and BLoCs would be registered here
  // using a service locator like GetIt.
  // Example:
  // await configureDependencies();

  // Placeholder for global Logger initialization.
  // A logging service would be set up here to configure different logging
  // levels for development and production environments.
  // Example:
  // Logger.init();

  // Run the main application widget.
  runApp(const CreativeFlowApp());
}