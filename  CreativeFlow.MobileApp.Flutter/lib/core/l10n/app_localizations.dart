import 'package:flutter/widgets.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/intl.dart';

// This file is a placeholder for the code generated by `flutter gen-l10n`.
// To generate the actual AppLocalizations class and bindings, you need to:
// 1. Add `flutter_localizations` and `intl` to pubspec.yaml.
// 2. Enable `generate: true` in a new `l10n.yaml` file in the project root.
// 3. Create ARB files in `lib/core/l10n/` (e.g., `intl_en.arb`, `intl_es.arb`).
// 4. Run `flutter gen-l10n` from the terminal.
//
// The generated file will replace this one and provide type-safe access
// to all translated strings.

/// Manages localization strings and internationalization (i18n) setup.
///
/// This class, used with the `intl` package, loads the appropriate strings
/// based on the device's locale and provides methods to access them.
class AppLocalizations {
  AppLocalizations(this.localeName);

  static Future<AppLocalizations> load(Locale locale) {
    final String name = locale.countryCode == null || locale.countryCode!.isEmpty
        ? locale.languageCode
        : locale.toString();
    final String localeName = Intl.canonicalizedLocale(name);
    // In a real generated file, this would call `initializeMessages` for the locale.
    return Future.value(AppLocalizations(localeName));
  }

  static AppLocalizations? of(BuildContext context) {
    return Localizations.of<AppLocalizations>(context, AppLocalizations);
  }

  final String localeName;

  // --- Example String Accessors ---
  // These will be generated automatically from the ARB files.

  /// The title of the application.
  String get appTitle {
    return Intl.message(
      'CreativeFlow AI',
      name: 'appTitle',
      desc: 'The title of the application',
      locale: localeName,
    );
  }

  /// Label for the login button.
  String get loginButton {
    return Intl.message(
      'Login',
      name: 'loginButton',
      desc: 'Label for login button',
      locale: localeName,
    );
  }

  // --- Localization Delegates ---

  static const LocalizationsDelegate<AppLocalizations> delegate = _AppLocalizationsDelegate();

  /// A list of this application's [localizationsDelegates].
  ///
  /// This list is used by `MaterialApp` to wire up the localization logic.
  static const List<LocalizationsDelegate<dynamic>> localizationsDelegates = <LocalizationsDelegate<dynamic>>[
    delegate,
    GlobalMaterialLocalizations.delegate,
    GlobalWidgetsLocalizations.delegate,
    GlobalCupertinoLocalizations.delegate,
  ];

  /// A list of the locales that this application supports.
  static const List<Locale> supportedLocales = <Locale>[
    Locale('en', 'US'), // English (United States)
    Locale('en', 'GB'), // English (United Kingdom)
    Locale('es', 'ES'), // Spanish (Spain)
    Locale('es', 'MX'), // Spanish (Mexico)
    Locale('fr', 'FR'), // French (France)
    Locale('de', 'DE'), // German (Germany)
  ];
}

class _AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  bool isSupported(Locale locale) => AppLocalizations.supportedLocales.any(
      (supportedLocale) => supportedLocale.languageCode == locale.languageCode);

  @override
  Future<AppLocalizations> load(Locale locale) => AppLocalizations.load(locale);

  @override
  bool shouldReload(_AppLocalizationsDelegate old) => false;
}