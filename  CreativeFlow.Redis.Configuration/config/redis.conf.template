# CreativeFlow Redis Server Configuration Template
# This template provides a standardized and well-commented foundation for Redis server instances.
# Placeholders in the format ##PLACEHOLDER## are intended to be replaced by setup scripts or automation tools like Ansible.
# Based on SDS section 4.1.1.

################################## NETWORK #####################################

# By default, if no "bind" configuration item is specified, Redis listens for
# connections from all the network interfaces available on the server.
# It is possible to listen to multiple interfaces by specifying multiple bind
# directives.
#
# Examples:
#
# bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1 ::1
bind ##REDIS_BIND_IP##

# Accept connections on the specified port, default is 6379.
port ##REDIS_PORT##

# TCP keepalive.
# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients with idle
# connections. This is useful for detecting dead peers.
tcp-keepalive 300

# When running in protected mode, Redis only accepts connections from clients
# connecting from the loopback addresses 127.0.0.1 and ::1, and from Unix
# domain sockets.
protected-mode yes

################################### GENERAL ####################################

# By default Redis does not run as a daemon. Use 'yes' to run in background.
# Note: This is not recommended when using systemd or other supervisors.
daemonize yes

# If you run Redis from upstart or systemd, Redis can interact with your
# supervision tree. Options:
#   supervised no      - no supervision interaction
#   supervised upstart - signal upstart by putting Redis into SIGSTOP
#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET
#   supervised auto    - detect upstart or systemd method based on
#                        UPSTART_JOB or NOTIFY_SOCKET environment variables
# Note: these supervision methods only signal "process is ready."
#       They do not imply daemonization.
# supervised no

# The file path where the process ID is written.
pidfile /var/run/redis_##REDIS_PORT##.pid

# Specify the server verbosity level.
# This can be one of:
# debug (a lot of information, useful for development/testing)
# verbose (many rarely useful info, but not a mess like the debug level)
# notice (moderately verbose, what you want in production probably)
# warning (only very important / critical messages are logged)
loglevel notice

# Specify the log file name. Also the empty string can be used to force
# Redis to log on the standard output.
logfile "/var/log/redis/redis_##REDIS_PORT##.log"

# Set the number of databases. The default database is DB 0.
databases 16

################################## SECURITY ####################################

# Require clients to issue AUTH <password> before processing any other
# commands. This is a critical security feature.
requirepass "##REDIS_PASSWORD##"

# It is possible to rename commands in a shared environment where there are
# clients that you don't trust. For instance you can rename the CONFIG command
# to a hard to guess name, so that clients can't change the configuration.
#
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
#
# To disable a command, rename it to an empty string.
# rename-command FLUSHALL ""
# rename-command FLUSHDB ""

################################ SNAPSHOTTING ################################

# Save the DB on disk:
#
#   save <seconds> <changes>
#
# Will save the DB if both the given number of seconds and the given
# number of write operations against the DB occurred.
save 900 1
save 300 10
save 60 10000

# By default Redis will stop accepting writes if RDB snapshots are failing.
stop-writes-on-bgsave-error yes

# Compress string objects using LZF when dump .rdb databases?
# For default that's set to 'yes' as it's almost always a win.
rdbcompression yes

# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
# This makes the format more resistant to corruption but there is a performance
# hit when saving and loading RDB files.
rdbchecksum yes

# The filename where to dump the DB
dbfilename dump_##REDIS_PORT##.rdb

# The working directory.
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
dir /var/lib/redis/##REDIS_PORT##

############################## APPEND ONLY MODE ##############################

# AOF persistence. Disabled by default.
appendonly ##AOF_ENABLED##

# The name of the append only file (default: "appendonly.aof")
appendfilename "appendonly_##REDIS_PORT##.aof"

# The fsync() policy.
#   always: fsync after every write. Slow, but safest.
#   everysec: fsync every second. Good compromise. Default.
#   no: let the OS decide when to fsync. Fastest, least safe.
appendfsync everysec

# When the AOF fsync policy is set to always or everysec, and a background
# saving process (BGSAVE or BGREWRITEAOF) is in progress, Redis may block
# too long on the fsync() call. Set to yes to avoid this.
no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file.
# Redis is able to automatically rewrite the log file implicitly calling
# BGREWRITEAOF when the AOF log size grows by a certain percentage.
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

################################ LUA SCRIPTING ###############################

# Max execution time of a Lua script in milliseconds.
lua-time-limit 5000

################################# SLOW LOG ###################################

# The Redis Slow Log is a system to log queries that exceeded a specified
# execution time. The execution time does not include I/O operations.
slowlog-log-slower-than 10000
slowlog-max-len 128

############################# MEMORY MANAGEMENT ################################

# Set a memory usage limit to the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected.
# Example: maxmemory 100mb
maxmemory ##MAXMEMORY_MB##mb

# How Redis will select what to remove when maxmemory is reached.
#   volatile-lru -> remove a key with an expire set using an LRU algorithm
#   allkeys-lru -> remove any key according to the LRU algorithm
#   volatile-lfu -> remove a key with an expire set using an LFU algorithm
#   allkeys-lfu -> remove any key according to the LFU algorithm
#   volatile-random -> remove a random key with an expire set
#   allkeys-random -> remove a random key, any key
#   volatile-ttl -> remove the key with the nearest expire time (minor TTL)
#   noeviction -> don't evict anything, just return an error on write operations
maxmemory-policy allkeys-lru

########################### KEYSPACE NOTIFICATIONS ###########################

# Keyspace notifications allow clients to subscribe to Pub/Sub channels
# in order to receive events affecting the Redis data set.
#
# K     Keyspace events, published with __keyspace@<db>__ prefix.
# E     Keyevent events, published with __keyevent@<db>__ prefix.
# g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
# $     String commands
# l     List commands
# s     Set commands
# h     Hash commands
# z     Sorted set commands
# x     Expired events (events generated every time a key expires)
# e     Evicted events (events generated when a key is evicted for maxmemory)
# A     Alias for "g$lshzxe", so that "AKE" means all the events.
notify-keyspace-events KEA

################################# CLIENTS ####################################

# Set the max number of connected clients at the same time.
maxclients 10000

############################# CLUSTER (Conditional) #############################
# These settings are only active if the ##IF_CLUSTER_MODE## prefix is removed.

##IF_CLUSTER_MODE##cluster-enabled yes
##IF_CLUSTER_MODE##cluster-config-file nodes-##REDIS_PORT##.conf
##IF_CLUSTER_MODE##cluster-node-timeout 15000
##IF_CLUSTER_MODE##cluster-announce-ip ##ANNOUNCE_IP##
##IF_CLUSTER_MODE##cluster-announce-port ##REDIS_PORT##
##IF_CLUSTER_MODE##cluster-announce-bus-port ##CLUSTER_BUS_PORT##

########################### REPLICATION (Conditional) ###########################
# These settings are only active if the ##IF_SLAVE_MODE## prefix is removed.
#
# Use replicaof to make a Redis instance a copy of another Redis server.
##IF_SLAVE_MODE##replicaof ##MASTER_IP## ##MASTER_PORT##

# If the master is password protected, set the password here for the replica.
##IF_SLAVE_MODE##masterauth "##MASTER_PASSWORD##"

# When a replica loses its connection with the master, or when the replication
# is still in progress, the replica can be configured to reply to client
# requests.
replica-serve-stale-data yes