/// <reference lib="webworker" />

import { cleanupOutdatedCaches, precacheAndRoute } from 'workbox-precaching';
import { registerRoute, Route } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

declare const self: ServiceWorkerGlobalScope;

// Pre-cache all the assets generated by Vite
// The 'self.__WB_MANIFEST' is injected by the vite-plugin-pwa
precacheAndRoute(self.__WB_MANIFEST);

// Clean up old caches
cleanupOutdatedCaches();

// --- Caching Strategies for Different Resources ---

// Cache Google Fonts with a cache-first strategy
const googleFontsRoute = new Route(
  ({ url }) => url.origin === 'https://fonts.googleapis.com' || url.origin === 'https://fonts.gstatic.com',
  new CacheFirst({
    cacheName: 'google-fonts',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache images with a stale-while-revalidate strategy
const imageRoute = new Route(
  ({ request }) => request.destination === 'image',
  new StaleWhileRevalidate({
    cacheName: 'images-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache read-only API GET requests with a network-first strategy
const apiRoute = new Route(
  ({ request, url }) => {
    return request.method === 'GET' && url.pathname.startsWith('/api/');
  },
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 60 * 24, // 24 hours
      }),
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
    networkTimeoutSeconds: 3, // Fallback to cache if network is slow
  })
);

// Register the routes
registerRoute(googleFontsRoute);
registerRoute(imageRoute);
registerRoute(apiRoute);

// --- Event Listeners ---

self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Basic offline fallback (optional, as NetworkFirst provides a fallback)
// self.addEventListener('fetch', (event) => {
//   if (event.request.mode === 'navigate') {
//     event.respondWith(
//       (async () => {
//         try {
//           const preloadResponse = await event.preloadResponse;
//           if (preloadResponse) {
//             return preloadResponse;
//           }
//           return await caches.match(event.request) || await fetch(event.request);
//         } catch (error) {
//           // Return the offline page from the cache
//           const cache = await caches.open(precache.cacheName);
//           return await cache.match('/offline.html');
//         }
//       })()
//     );
//   }
// });

// --- Push Notification Handling (Client-side part) ---

self.addEventListener('push', (event) => {
  const data = event.data?.json() ?? {};
  const title = data.title || 'CreativeFlow AI';
  const options = {
    body: data.message || 'You have a new notification.',
    icon: '/logo192.png',
    badge: '/favicon.ico',
    data: {
      url: data.link || '/',
    },

  };
  event.waitUntil(self.registration.showNotification(title, options));
});

self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  const urlToOpen = event.notification.data.url || '/';
  event.waitUntil(
    self.clients
      .matchAll({
        type: 'window',
        includeUncontrolled: true,
      })
      .then((clientList) => {
        if (clientList.length > 0) {
          clientList[0].navigate(urlToOpen);
          clientList[0].focus();
        } else {
          self.clients.openWindow(urlToOpen);
        }
      })
  );
});