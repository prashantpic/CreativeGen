# Playbook for automating OS and software patching across servers.
# Supports scheduled or on-demand execution.
---
- name: Perform system patching and reboots
  hosts: all # Recommended to run with --limit, e.g., --limit web_servers
  become: true
  serial: 1 # Run on one host at a time to minimize service disruption

  vars:
    reboot_required_file: /var/run/reboot-required

  tasks:
    - name: Check OS family
      ansible.builtin.debug:
        msg: "Running on {{ ansible_os_family }}"

    - name: Update apt cache (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600 # One hour
      when: ansible_os_family == "Debian"
      changed_when: false # This task doesn't change state itself

    - name: Perform a safe upgrade of all packages (Debian/Ubuntu)
      ansible.builtin.apt:
        upgrade: dist
        autoremove: true
      when: ansible_os_family == "Debian"
      register: apt_upgrade_result

    # Add similar blocks for other OS families like RedHat if needed
    # - name: Perform a full system update (RedHat/CentOS)
    #   ansible.builtin.yum:
    #     name: '*'
    #     state: latest
    #   when: ansible_os_family == "RedHat"
    #   register: yum_update_result

    - name: Check if a reboot is required
      ansible.builtin.stat:
        path: "{{ reboot_required_file }}"
      register: reboot_required_stat
      changed_when: false # This task only checks state

    - name: Reboot the server if required
      ansible.builtin.reboot:
        msg: "Rebooting server after kernel/system updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami
      when: reboot_required_stat.stat.exists