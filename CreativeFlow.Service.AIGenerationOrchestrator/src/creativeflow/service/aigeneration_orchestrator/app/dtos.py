"""
Defines Data Transfer Objects (DTOs) using Pydantic for API request/response
validation and for structuring event payloads. This ensures clear and robust
data contracts for data moving into and out of the service.
"""

from typing import Any, Dict, List, Literal, Optional
from uuid import UUID

from pydantic import BaseModel, Field


# --- API DTOs ---

class GenerationRequestCreateDTO(BaseModel):
    """DTO for creating a new generation request."""
    projectId: UUID
    inputPrompt: str
    styleGuidance: Optional[str] = None
    inputParameters: Dict[str, Any] = Field(
        ...,
        example={"format": "InstagramStory", "resolution": "1080x1920", "samples": 4}
    )


class GenerationInitiatedResponseDTO(BaseModel):
    """DTO for the response after successfully initiating a generation."""
    generationId: UUID


# --- n8n Callback DTOs ---

class N8NErrorDTO(BaseModel):
    """DTO for error details within the n8n callback."""
    code: str
    message: str


class N8NResultAssetDTO(BaseModel):
    """DTO for a single asset generated by n8n."""
    assetId: UUID
    url: str


class N8NResultDataDTO(BaseModel):
    """DTO for the 'results' field in the n8n callback."""
    sampleAssets: Optional[List[N8NResultAssetDTO]] = None
    finalAssetId: Optional[UUID] = None
    # Can be extended with other result types
    metadata: Optional[Dict[str, Any]] = None


class N8NCallbackDTO(BaseModel):
    """
    DTO for the entire webhook payload received from the n8n workflow engine.
    """
    generationId: UUID
    status: Literal["success", "failure"]
    stage: Literal["samples_generated", "final_asset_generated", "content_rejected"]
    results: Optional[N8NResultDataDTO] = None
    error: Optional[N8NErrorDTO] = None

    # Pydantic validator can be added here if needed, for example:
    # @validator('error', always=True)
    # def check_error_for_failure_status(cls, v, values):
    #     if values.get('status') == 'failure' and v is None:
    #         raise ValueError('error must be provided when status is "failure"')
    #     return v