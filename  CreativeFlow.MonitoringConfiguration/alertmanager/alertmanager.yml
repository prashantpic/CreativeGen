# Main Alertmanager configuration.
# Defines alert routing, receivers (e.g., email, Slack, PagerDuty),
# inhibition rules, and notification templates.
# Requirement(s) Addressed: DEP-005, QA-003.1

global:
  resolve_timeout: 5m
  # SMTP settings for email notifications. Secrets must be managed externally.
  smtp_smarthost: '<SMTP_HOST>:<SMTP_PORT>'
  smtp_from: 'alertmanager@creativeflow.ai'
  smtp_auth_username: '<SMTP_USERNAME>'
  smtp_auth_password: '<SMTP_PASSWORD_SECRET_PLACEHOLDER>'
  # Slack API URL (webhook). Secret must be managed externally.
  slack_api_url: '<SLACK_WEBHOOK_URL_SECRET_PLACEHOLDER>'

# The root route. All alerts enter here.
route:
  group_by: ['alertname', 'service', 'severity']
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 4h # Resend notifications for ongoing alerts every 4 hours.
  receiver: 'default-receiver' # Default receiver if no sub-routes match.

  # Nested routes for specific matching.
  routes:
    # --- Severity-based routing ---
    - receiver: 'critical-pagerduty'
      match_re:
        severity: 'critical|P1'
      continue: true # Allow this to match and then continue to other routes (e.g., service-specific)

    - receiver: 'warning-slack'
      match_re:
        severity: 'warning|P2|P3'
      continue: true

    # --- Service-based routing ---
    - receiver: 'ai-infra-slack'
      match:
        service: 'custom-ai-models'
      # No 'continue' means if an alert matches this, it stops here.

# Defines how notifications are delivered.
receivers:
  - name: 'default-receiver'
    email_configs:
      - to: '<DEFAULT_OPS_EMAIL_GROUP@creativeflow.ai>'
        send_resolved: true
        html: '{{ template "email.default.html" . }}'
        headers:
          Subject: '{{ template "email.default.subject" . }}'

  - name: 'critical-pagerduty'
    pagerduty_configs:
      - service_key: '<PAGERDUTY_CRITICAL_SERVICE_KEY_SECRET_PLACEHOLDER>'
        send_resolved: true
        description: "{{ range .Alerts }}{{ .Annotations.summary }}\n{{ end }}"
        details:
          Firing: '{{ .Alerts.Firing | len }}'
          Resolved: '{{ .Alerts.Resolved | len }}'
          Description: '{{ .CommonAnnotations.description }}'
          Runbook: '{{ .CommonAnnotations.runbook_url }}'

  - name: 'warning-slack'
    slack_configs:
      - channel: '#alerts-warning'
        send_resolved: true
        title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.service | default "N/A" }}'
        text: '{{ template "slack.default.text" . }}'

  - name: 'ai-infra-slack'
    slack_configs:
      - channel: '#alerts-ai-infra'
        send_resolved: true
        title: '[{{ .Status | toUpper }}] AI Model Alert: {{ .CommonLabels.alertname }}'
        text: "<!channel>\n{{ range .Alerts }}*Model:* `{{ .Labels.model_name }}`\n*Summary:* {{ .Annotations.summary }}\n*Description:* {{ .Annotations.description }}\n*Runbook:* <{{ .Annotations.runbook_url }}|Link>\n{{ end }}"

# Rules to suppress notifications for certain alerts if other alerts are already firing.
inhibit_rules:
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    # Don't send warning if a critical alert with the same labels is already firing.
    equal: ['alertname', 'service', 'instance']

# Path to custom notification templates.
templates:
  - '/etc/alertmanager/templates/*.tmpl'